"""Match representative transcript with expression level."""
# Made by Hugo Gillet #

import logging
import pandas as pd  # type: ignore
from gtfparse import read_gtf  # type: ignore

LOG = logging.getLogger(__name__)


class MatchReptransExplvl:
    """Match representative transcript with expression level."""

    def __init__(self):
        """Initiate."""

    @staticmethod
    def gtf_to_df(gtf_file: str) -> pd.DataFrame:
        """Gtf to df.

        This function takes a .gtf file and converts it into a pandas DataFrame
        containing gene_id and their transcript_id.

        Args:
            gtf_file (str): Path to the .gtf file.

        Returns:
            df_gtf (pd.DataFrame): Pandas DataFrame containing columns
            'Gene' and 'Transcript'.

        Raises:
            None
        """
        df_gtf = read_gtf(gtf_file,).to_pandas()
        df_gtf = df_gtf[df_gtf["feature"] == "transcript"]
        df_gtf = df_gtf[["gene_id", "transcript_id"]]
        df_gtf = df_gtf.rename(columns={
            "gene_id": "Gene", "transcript_id": "Transcript"
            })
        return df_gtf

    @staticmethod
    def dict_repr_trans_to_df(
        dict_repr_trans: "dict[str, str]"
    ) -> pd.DataFrame:
        """Convert a dict of genes and representative transcript into a df.

        Args:
            dict_repr_trans (dict):
            {'Gene': ['transcriptA', 'transcriptB'], ...}

        Returns:
            Pandas DataFrame with 'Gene' and 'Transcript' as columns.

        Raises:
            TypeError: Only dictionaries are allowed.
            TypeError: Keys should be strings.
            TypeError: Values should be strings.
        """
        if not isinstance(dict_repr_trans, dict):
            LOG.error("Only dictionaries are allowed")
            raise TypeError("Only dictionaries are allowed")
        if not all(
            isinstance(key, str) for key in dict_repr_trans.keys()
        ):
            LOG.error("Keys should be strings")
            raise TypeError("Keys should be strings")
        if not all(
            isinstance(value, str) for value in dict_repr_trans.values()
        ):
            LOG.error("Values should be strings")
            raise TypeError("Values should be strings")

        df_repr_trans = pd.DataFrame.from_dict(
            dict_repr_trans, orient="index", columns=["reprTranscript"]
            )
        df_repr_trans = df_repr_trans.reset_index()
        column_names = ["Gene", "reprTrans"]
        df_repr_trans.columns = pd.Index(column_names)
        # pylint: disable=E1136,E1137
        df_repr_trans["reprTrans"] = df_repr_trans["reprTrans"].str.replace(
            r"\.[1-9]", "", regex=True
        )

        return df_repr_trans

    @staticmethod
    def tsv_or_csv_to_df(input_txt: str) -> pd.DataFrame:
        """Convert a TSV or CSV file into a pandas DataFrame.

        Args:
            input_txt (str): TSV or CSV file containing transcript expression
            levels.

        Returns:
            df_gene (pd.DataFrame): Pandas DataFrame with 'Transcript' and
            'Expression_level' as columns.

        Raises:
            None
        """
        df_input = pd.read_csv(
            input_txt,
            sep=r"[\t,]",
            lineterminator="\n",
            names=["Transcript", "Expression_level"],
            engine="python",
        )
        return df_input

    @staticmethod
    def expr_level_by_gene(
        df_expr_transcript: pd.DataFrame, df_output_gtf_selection: pd.DataFrame
    ) -> pd.DataFrame:
        """Sum expression levels.

        Find the gene of each transcript given by the expression level
        CSV/TSV file and sum the expression level of all transcripts
        from the same gene.

        Args:
            df_expr_transcript (pd.DataFrame):
                Pandas DataFrame containing transcripts and their
                expression levels, generated by the
                "tsv_or_csv_to_df" function.
            df_output_gtf_selection (pd.DataFrame):
                Pandas DataFrame containing genes and transcripts,
                generated by the "transcripts_by_gene_inDf" function.

        Returns:
            Pandas DataFrame having 'Gene' and sum of its
            transcript expression levels.

        Raises:
            None
        """
        df_merged = pd.merge(
            df_output_gtf_selection, df_expr_transcript,
            how="inner", on="Transcript")
        df_sum = df_merged.groupby("Gene")["Expression_level"].sum(
        ).reset_index()
        return df_sum

    @staticmethod
    def match_by_gene(
        df_repr_transcript: pd.DataFrame,
        df_expression_level_by_gene: pd.DataFrame
    ) -> pd.DataFrame:
        """Find matching genes between the two DataFrames.

        Args:
            df_repr_transcript (pd.DataFrame): Pandas DataFrame
            containing genes and their representative transcripts,
            generated by the "dict_repr_trans_to_df()" function.
            df_expression_level_by_gene (pd.DataFrame): Pandas DataFrame
            containing genes and their expression levels,
            generated by the "transcript_by_gene_inDf()" function.

        Returns:
            Pandas DataFrame having representative transcripts and
            their expression levels.

        Raises:
            None
        """
        df_merged = pd.merge(
            df_repr_transcript, df_expression_level_by_gene,
            how="inner", on="Gene"
        )
        df_clean = df_merged.loc[:, ["reprTrans", "Expression_level"]]
        return df_clean

    def match_repr_transcript_expression_level(
        self, expr_trans: str, dict_repr_trans: dict, gtf_file: str,
    ):
        """Replace expression level with representative transcripts.

        Combine functions to replace transcripts from an expression level
        CSV/TSV file with representative transcripts.

        Args:
            expr_trans (str): CSV or TSV file containing transcripts
                and their expression level.
            dict_repr_trans (dict): Dictionary of genes
                and their representative transcripts.
            gtf_file (str): Path to the GTF file.

        Returns:
            Pandas DataFrame of representative transcripts
                and their expression level.

        Raises:
            None
        """
        df_gene_transcript = self.gtf_to_df(gtf_file)
        df_expr_trans = self.tsv_or_csv_to_df(expr_trans)
        df_repr_trans = self.dict_repr_trans_to_df(dict_repr_trans)
        df_expr_level_by_gene = self.expr_level_by_gene(
            df_expr_trans, df_gene_transcript
        )
        df_match = self.match_by_gene(df_repr_trans, df_expr_level_by_gene)
        df_match.rename(
            columns={"reprTrans": "id", "Expression_level": "level"},
            inplace=True
        )
        return df_match
